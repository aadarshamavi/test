generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id         String           @id @default(cuid())
  name       String
  email      String           @unique
  image      String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  accounts   Account[]
  sessions   Session[]
  Room       Room[]
  JoinedRoom RoomEnrollment[]
  Assignment Assignment[]
  Comment    Comment[]
}

model Room {
  id             String           @id @default(cuid())
  name           String
  section        String
  key            String           @unique
  admin          User             @relation(fields: [adminId], references: [id])
  adminId        String
  RoomEnrollment RoomEnrollment[]
  created_at     DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Assignment     Assignment[]
}

model RoomEnrollment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String
  created_at DateTime @default(now())
}

model Assignment {
  id             String           @id @default(cuid())
  title          String
  description    String?
  dueDate        DateTime
  created_at     DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  room           Room             @relation(fields: [roomId], references: [id])
  roomId         String
  AssignmentFile AssignmentFile[]
  Comment        Comment[]
}

model AssignmentFile {
  id           String     @id @default(cuid())
  fileName     String
  fileType     String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model Comment {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  comment      String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
